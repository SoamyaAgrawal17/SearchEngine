package algorithm;

import com.sun.glass.events.KeyEvent;
import edu.stanford.nlp.ling.CoreLabel;
import edu.stanford.nlp.process.CoreLabelTokenFactory;
import edu.stanford.nlp.process.PTBTokenizer;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import lombok.extern.slf4j.Slf4j;
import opennlp.tools.stemmer.PorterStemmer;
import org.apache.commons.codec.language.Metaphone;

import javax.swing.*;
import java.awt.event.ActionEvent;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.nio.charset.StandardCharsets;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map.Entry;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Soamya Agrawal, Tejeshwar Reddy, Ayushi Behl
 */
@Slf4j
public class InformationRetrievalUI extends javax.swing.JFrame {

    /**
     * Creates new form algorithm.InformationRetrievalUI
     */
    public InformationRetrievalUI() throws IOException {
        initComponents();
        addPopup();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jSpinner1 = new javax.swing.JSpinner();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Search UI ");
        setPreferredSize(new java.awt.Dimension(639, 370));

        jTextField1.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jTextField1.setToolTipText("Enter the Query Here");
        jTextField1.addActionListener((java.awt.event.ActionEvent evt) -> jTextField1ActionPerformed());
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            @Override
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField1KeyPressed(evt);
            }
        });

        jButton1.setText("Search");
        jButton1.addActionListener((java.awt.event.ActionEvent evt) -> jButton1ActionPerformed());

        jLabel1.setFont(new java.awt.Font("Ubuntu", 0, 13)); // NOI18N
        jLabel1.setText("Search Here");

        jLabel2.setFont(new java.awt.Font("Ubuntu", 0, 13)); // NOI18N
        jLabel2.setText("Search Results");

        jLabel3.setText("Select the no. of documents do be retrieved : ");

        jSpinner1.setModel(new javax.swing.SpinnerNumberModel(10, 3, 30, 1));

        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jList1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(271, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)))
                .addGap(34, 34, 34))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(58, 58, 58))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed() {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        dm.removeAllElements();
        String query = jTextField1.getText();
        try {
            searchResult(query);
        } catch (JSONException | IOException ex) {
            Logger.getLogger(InformationRetrievalUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField1ActionPerformed() {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jTextField1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            dm.removeAllElements();
            String query = jTextField1.getText();
            try {
                searchResult(query);
            } catch (JSONException | IOException ex) {
                Logger.getLogger(InformationRetrievalUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jTextField1KeyPressed

    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked
        // TODO add your handling code here:
        jList1.setSelectedIndex(jList1.locationToIndex(evt.getPoint()));
        data = jList1.getSelectedValue();
        int index = jList1.getSelectedIndex();
        log.info(data);
        if (SwingUtilities.isRightMouseButton(evt) && jList1.locationToIndex(evt.getPoint()) == index && !jList1.isSelectionEmpty()) {
            pop.show(jList1, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_jList1MouseClicked

    private String fileName = "/corpus/pizza_request_dataset.json";

    private void searchResult(String query) throws IOException {

        TreeMap<String, Integer> queryMap = new TreeMap<>();
        // Query Tokenization begins
        PTBTokenizer<CoreLabel> ptbtQuery = new PTBTokenizer<>(new StringReader(query), new CoreLabelTokenFactory(), "");
        Metaphone metaphone = new Metaphone();
        while (ptbtQuery.hasNext()) {
            CoreLabel queryToken = ptbtQuery.next();
            // Query Stemming begins
            PorterStemmer s = new PorterStemmer();
            String querystring = queryToken.toString();
            querystring = querystring.toLowerCase();
            for (int c = 0; c < querystring.length(); c++) {
                s.add(querystring.charAt(c));
            }
            s.stem();
            String queryTerm;
            queryTerm = s.toString();

            if (queryTerm.matches("[a-zA-Z][a-z]+")) {

                // Query Metaphone begins
                queryTerm = metaphone.encode(queryTerm);
            }
            Integer freq = queryMap.get(queryTerm);
            queryMap.put(queryTerm, (freq == null) ? 1 : freq + 1);
        }

        // Corpus-retrieving of documents from json file
        String json = null;
        BufferedReader br = new BufferedReader(new InputStreamReader(getClass().getResourceAsStream(fileName), StandardCharsets.UTF_8));
        try {
            StringBuilder sb = new StringBuilder();
            String line = br.readLine();

            while (line != null) {
                sb.append(line);
                line = br.readLine();
            }
            json = sb.toString();
        } finally {
            br.close();
        }
        JSONArray jsonArray = new JSONArray(json);

        // 'finalTermFrequencyMap' is the TreeMap that displays the final document with dictionary
        // terms as tokens and integer value as document frequency
        TreeMap<String, Integer> finalTermFrequencyMap = new TreeMap<>();

        // Making an array list of all the individual Treemaps that represent
        // individual documents (in terms of tokens and term frequency).
        ArrayList<TreeMap<String, Integer>> list = new ArrayList<>();
        for (int i = 0; i < jsonArray.length(); i++) {
            JSONObject object = jsonArray.getJSONObject(i);
            String requestText = object.getString("request_text");

            //Document Tokenization begins
            TreeMap<String, Integer> individualTermFrequency = new TreeMap<>();

            PTBTokenizer<CoreLabel> ptbtDoc = new PTBTokenizer<>(new StringReader(requestText),
                    new CoreLabelTokenFactory(), "");
            while (ptbtDoc.hasNext()) {
                CoreLabel docToken = ptbtDoc.next();
                //Document Stemming begins
                PorterStemmer s = new PorterStemmer();
                String docString = docToken.toString();
                docString = docString.toLowerCase();

                for (int c = 0; c < docString.length(); c++) {
                    s.add(docString.charAt(c));
                }
                s.stem();
                String docTerm;
                docTerm = s.toString();
                if (docTerm.matches("[a-zA-Z][a-z]+")) {
                    //Document Metaphone begins
                    docTerm = metaphone.encode(docTerm);
                }
                Integer freq = individualTermFrequency.get(docTerm);
                individualTermFrequency.put(docTerm, (freq == null) ? 1 : freq + 1);
            }
            for (Entry<String, Integer> entry : individualTermFrequency.entrySet()) {
                String key = entry.getKey();
                Integer freq = finalTermFrequencyMap.get(key);
                finalTermFrequencyMap.put(key, (freq == null) ? 1 : freq + 1);
            }

            list.add(individualTermFrequency);
        }
        //Total Number of Documents-'totalDocuments'
        int totalDocuments = list.size();
        TreeMap<String, Double> rankedProduct = new TreeMap<>();

        for (Entry<String, Integer> entry : finalTermFrequencyMap.entrySet()) {

            String key = entry.getKey();
            Integer documentFrequency = entry.getValue();
            Double rankedValue = (totalDocuments - documentFrequency + 0.5) / (documentFrequency + 0.5);
            rankedProduct.put(key, rankedValue);
        }

        // Making a HashMap that contains dictionary tokens and their final
        // product value which would be used to keep ranking of documents
        HashMap<String, Double> unsortMap = new HashMap<>();
        int i = 1;
        for (TreeMap<String, Integer> d : list) {
            Double product = 1.00;
            for (Entry<String, Integer> entry : queryMap.entrySet()) {

                String key = entry.getKey();
                if (d.containsKey(key)) {
                    product = product * (rankedProduct.get(key));

                }
            }
            unsortMap.put("Doc " + i, product);
            i++;
        }
        // Making a new HashMap that would sort the HashMap that contained key
        // and unsorted product ranks in descending order
        HashMap<String, Double> sortedMapDesc = Util.sortByComparator(unsortMap, false);
        ArrayList<String> sortedOutput = new ArrayList<>();
        for (Entry<String, Double> entry : sortedMapDesc.entrySet()) {

            String key = entry.getKey();
            Double d = entry.getValue();
            sortedOutput.add(key);
            log.info(key + "   " + d);
        }

        populateList(sortedOutput);
    }

    private static String data = "";
    private final JPopupMenu pop = new JPopupMenu();
    private DefaultListModel<String> dm = new DefaultListModel<>();

    private void populateList(ArrayList<String> sortedOutput) {
        int docNumber = Integer.parseInt(jSpinner1.getValue().toString());
        for (int i = 0; i < docNumber; i++) {
            dm.addElement(sortedOutput.get(i));
        }
        jList1.setModel(dm);
    }

    private void addPopup() throws IOException {
        JMenuItem show = new JMenuItem("show");
        pop.add(show);
        BufferedReader br = new BufferedReader(new InputStreamReader(getClass().getResourceAsStream(fileName), StandardCharsets.UTF_8));
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();
        while (line != null) {
            sb.append(line);
            line = br.readLine();
        }
        br.close();
        show.addActionListener((ActionEvent e) -> {
                try {
                    JSONArray array = new JSONArray(sb.toString());
                    JSONObject object = null;
                    String content = null;
                    if (data != null) {
                        object = array.getJSONObject(Integer.parseInt(data.substring(4)));
                        content = object.getString("request_text");
                    }
                    JOptionPane.showMessageDialog(InformationRetrievalUI.this, "<html><body><p style='width: 200px;'>" + content, "DOC DATA", JOptionPane.INFORMATION_MESSAGE);
                } catch (JSONException ex) {
                    Logger.getLogger(InformationRetrievalUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        );
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InformationRetrievalUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */

        java.awt.EventQueue.invokeLater(() -> {
            try {
                new InformationRetrievalUI().setVisible(true);
            } catch (JSONException | IOException ex) {
                Logger.getLogger(InformationRetrievalUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
